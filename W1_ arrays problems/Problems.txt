Q1 )Maximum subarray problem 
find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum, numbers can be negatives .

input :
−2, 1, −3, 4, −1, 2, 1, −5, 4
output :
6 ( as subarray is 4, −1, 2, 1 )

solution:
Kadane's algorithm
http://www.geeksforgeeks.org/largest-sum-contiguous-subarray/
=================================

Q2)Given an array that is a rotation of a sorted array (elements are unique). The rotation of an array is to split the original array into two parts and concatenate the left part to the tail of the right part. E.g., {3,4,5,1,2} is a rotation of {1,2,3,4,5}. Now given this rotated array, find the smallest element.

solution :
modified binary search 
l=1, r=n

while a[l]>a[r] do
  if (l+1==r) then
    return r
  m=(l+r)/2
  if a[m]>a[l] then
    l=m
  else
    r=m
return a[l]

==================================
Q3)Given a sorted array, if A[i] == i, i is called magic index. Find the magic index.
followup : values are distinct 
input :
[-23, -4, 2, 19, 56]
output:
2
solution :
modified binary search 
https://github.com/yxjiang/algorithms/blob/master/src/main/java/algorithm/cc150/chapter9/Question3.java
http://comproguide.blogspot.com/2014/02/finding-magic-index-of-array.html

Guide line :
Given Sorted array <=> Binary search can be modified to do lots of stuff

====================
Q4)given an array A=BC where B is a sorted array with non-increasing order, and C is a sorted array with non-decreasing order. Find B and C.
input 
7 6 5 4 1 2 3 4 5 6 
output 
1 ( separation point )
soution:
again modified binary search 
int separation(int[] a) {
		if (a == null || a.length == 0)
			return -1;
		int start = 0;
		int end = a.length - 1;
		int mid = -1;

		while (end > start) {
			mid = (start + end) / 2;

			if (a[mid] < a[start]) {
				start = mid;
			}
			if (a[mid] < a[end]) {
				end = mid;
			}

		}
		return mid;

	}

Q5)
Given an array of of size n and a number k, find all elements that appear more than n/k times
another question : find the most repeated number 
input :
3, 1, 2, 2, 1, 2, 3, 3  and k is 4
output :
2, 3
http://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/

Q6)Given an array of integers, all integers occur exactly twice except for one. Find the only integer that occurs once.
solution :
use bit xoring of all elements 

Q7)
given a sorted array, find two numbers that sum to m

 a trick called ruler reading. Keep two pointers to the left and right of the array, and move the pointers until the sum if m. O(n)



Q8)
Count Pairs of Numbers with a Given Difference K
Input: arr[] = {1, 5, 3, 4, 2}, k = 3
Output: 2
There are 2 pairs with difference 3, the pairs are {1, 4} and {5, 2} 

Input: arr[] = {8, 12, 16, 4, 0, 20}, k = 4
Output: 5
There are 5 pairs with difference 4, the pairs are {0, 4}, {4, 8}, 
{8, 12}, {12, 16} and {16, 20} 

sort first , then use binary search for (A[i]+k) => O(nlogn) 
use hashing and search for (A[i]+k) => time O(N) , space O(n)


http://www.geeksforgeeks.org/count-pairs-difference-equal-k/

Q9)“Given two arrays find all the points of intersection between the (i.e. equal elements) and return them in an array.”

soln : if sorted we can do it in O(M+N)
/ Precondition: arr1 and arr2 are both sorted.
func intersection1(arr1, arr2):
  intersect = { }
  i1 = 0;
  i2 = 0;
  while i1 < arr1.length and i2 < arr2.length:
    if arr1[i1] == arr2[i2]:
      intersect.add(arr1[i1])
      i1++
      i2++
    else if arr1[i1] < arr2[i2]:
      i1++
    else:
      i2++
  return intersect
if not sorted , sort the smaller , and loop larger a[i]and binary search b[a[i]] =>O(nlogn)
another option is to hash the smaller , and loop larger and lookup =>time N , space N 

http://www.geeksforgeeks.org/union-and-intersection-of-two-sorted-arrays-2/

Q10)Missing Number in an Array
An array n - 1 unique numbers in the range from 0 to n - 1. There is only one number in the range from 0 to n - 1 missing. Please write a function to find the missing number. 

soln:
 If we scan all numbers in the array, we could get the sum of all numbers. The sum is denoted as sum1.we could also get the sum of all numbers in the range from 0 to n - 1, which is n*(n-1)/2. The sum is denoted as sum2. The only number missing in the array is the difference between sum2 and sum1.  => O(N) , space (1)
 



 more problems :
http://www.geeksforgeeks.org/category/c-arrays/
http://fdatamining.blogspot.com/2013/10/a-collection-of-interview-questions-on.html
http://www.crazyforcode.com/array/